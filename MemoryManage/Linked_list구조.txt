ver0.0.5 : 핵심 함수들과 기능들에 대한 것들은 간단히 작성.
ver0.0.6 : 링크드 리스트 주소 연결 삽입 기능.

#include <iostream>
#include <string>
#include <unordered_map>

using namespace std;

string s;
int num;

struct Node {
    char data;
    Node* prev, * next;
    Node(char data) : data(data), prev(nullptr), next(nullptr) {}
};

unordered_map<int, Node*> nodes;

void Insert_front(Node* u, Node* new_u) {
    new_u->prev = u->prev;
    new_u->next = u;

    if (new_u->prev != nullptr) {
        new_u->prev->next = new_u;
    }
    if (new_u->next != nullptr) {
        new_u->next->prev = new_u;
    }

    if (u->prev == nullptr) {
        nodes[0] = new_u;
    }
}

void Delete_node(Node* u) {
    if (u->prev != nullptr) {
        u->prev->next = u->next;
    }
    if (u->next != nullptr) {
        u->next->prev = u->prev;
    }
    delete u;
}

int main() {
    cin >> s >> num;

    s += " ";

    // Initialize doubly linked list
    nodes[0] = new Node(s[0]);
    Node* current = nodes[0];
    for (int i = 1; i < s.length(); i++) {
        Node* new_node = new Node(s[i]);
        nodes[i] = new_node;
        current->next = new_node;
        new_node->prev = current;
        current = new_node;
    }

    // Start pointer at the end of the list
    current = nodes[s.length() - 1];

    for (int i = 0; i < num; i++) {
        char c;
        cin >> c;

        // Move to previous node
        if (c == 'L') {
            if (current->prev != nullptr) {
                current = current->prev;
            }
        }
        // Move to next node
        else if (c == 'D') {
            if (current->next != nullptr) {
                current = current->next;
            }
        }
        // Delete previous node
        else if (c == 'B') {
            if (current->prev != nullptr) {
                Node* to_delete = current->prev;
                if (to_delete->prev != nullptr) {
                    to_delete->prev->next = current;
                }
                else {
                    nodes[0] = current;
                }
                current->prev = to_delete->prev;
                Delete_node(to_delete);
            }
        }
        else if (c == 'P') {
            char a;
            cin >> a;

            Node* new_node = new Node(a);
            Insert_front(current, new_node);
        }
    }

    // Move to the start of the list
    while (nodes[0]->prev != nullptr) {
        nodes[0] = nodes[0]->prev;
    }

    // Traverse the list from the start and print the data
    current = nodes[0];
    while (current != nullptr) {
        cout << current->data;
        current = current->next;
    }

    return 0;
}